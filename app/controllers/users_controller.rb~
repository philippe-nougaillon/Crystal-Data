# encoding: utf-8

class UsersController < ApplicationController
  before_action :set_user, only: [:show, :edit, :update, :destroy]

  skip_before_filter :authorize, only: [:new, :create, :forgot_password]

  # GET /users
  # GET /users.json
  def index
    user = User.find(session[:user_id])
    @participants = user.account.participants.group(:user_id)
  end

  # GET /users/1
  # GET /users/1.json
  def show
  end

  # GET /users/new
  def new
    @user = User.new
  end

  # GET /users/1/edit
  def edit
  end

  # POST /users
  # POST /users.json
  def create
    @user = User.new(user_params)
    #@user.account_id = User.find(session[:user_id]).account_id
    pass = random_password
    @user.password = pass
    @user.password_confirmation = pass

    @user.username = @user.email.split('@').first
    @user.name = @user.username

    respond_to do |format|
      if @user.save
        @account = Account.create(name:@user.username)
        @account.users << @user

        # notifier par mail le nouveau mot de passe 
        Notifier.account_welcome_with_password(@account, @user, pass).deliver_now

        # si ajout participant quand pas connecté, on connecte  
        session[:user_id] = @user.id unless session[:user_id]

        format.html { redirect_to projects_path, notice: "Bienvenue" }
        format.json { render action: 'show', status: :created, location: @user }
      else
        format.html { render action: 'new' }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /users/1
  # PATCH/PUT /users/1.json
  def update
    respond_to do |format|
      if @user.update(user_params)
        format.html { redirect_to @user, notice: "Cet utilisateur vient d'être modifié" }
        format.json { head :no_content }
      else
        format.html { render action: 'edit' }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /users/1
  # DELETE /users/1.json
  def destroy
    @user.destroy
    respond_to do |format|
      format.html { redirect_to users_url }
      format.json { head :no_content }
    end
  end

  def login
    session[:user] = User.find(params[:id])
    redirect_to users_path, notice: "Utilisateur login ok"
  end  

  def forgot_password
    unless params[:courriel].blank?
       u = User.find_by(email:params[:courriel])
       if u and !u.participants.where(client:true).any?
          pass = random_password
          u.password = pass
          u.password_confirmation = pass
          u.save

          # notifier par mail le nouveau mot de passe 
          Notifier.forgot_password(u, pass).deliver_now
       
          flash[:notice] = "Nouveau mot de passe envoyé"
          redirect_to root_url
       else
          flash[:notice] = "Courriel inconnu..."
          redirect_to forgot_password_path
       end
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_user
      @user = User.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def user_params
      params.require(:user).permit(:name, :username, :password, :password_confirmation, :picturelink, :email, :avatar, :updated_at)
    end

    def random_password(size = 5)
      chars = (('A'..'Z').to_a + ('0'..'9').to_a) - %w(i o 0 1 l 0)
      (1..size).collect{|a| chars[rand(chars.size)] }.join  
    end

end
